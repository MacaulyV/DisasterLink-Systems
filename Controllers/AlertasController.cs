using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Mvc;
using DisasterLink_API.DTOs;
using DisasterLink_API.Interfaces.Services;
using Microsoft.AspNetCore.Authorization;
using DisasterLink_API.DTOs.Common;

namespace DisasterLink_API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    public class AlertasController : ControllerBase
    {
        private readonly IAlertaService _service;

        public AlertasController(IAlertaService service)
        {
            _service = service;
        }

        /// <summary>
        /// Retorna todos os alertas ativos do sistema.
        /// </summary>
        /// <remarks>
        /// Este endpoint permite visualizar todos os alertas que est√£o atualmente ativos no sistema.
        /// 
        /// Caracter√≠sticas:
        /// - Requer autentica√ß√£o JWT para acesso
        /// - Acesso restrito apenas para administradores
        /// - Retorna uma lista completa de alertas ativos
        /// 
        /// Exemplo de uso:
        /// GET /api/alertas/ativos
        /// 
        /// üîí Seguran√ßa: Este endpoint √© protegido e requer autentica√ß√£o JWT v√°lida
        /// </remarks>
        [HttpGet("ativos")]
        [Authorize]
        [ProducesResponseType(typeof(IEnumerable<AlertaDto>), 200)]
        public async Task<ActionResult<IEnumerable<AlertaDto>>> GetAtivos()
        {
            var list = await _service.GetAllAsync();
            foreach (var alerta in list)
            {
                AddLinksToAlertaDto(alerta);
            }
            return Ok(list);
        }

            /// <summary>
            /// Busca alertas ativos para uma cidade espec√≠fica, filtrando apenas aqueles que o usu√°rio ainda n√£o visualizou.
            /// </summary>
            /// <remarks>
            /// Este endpoint permite consultar alertas ativos para uma cidade espec√≠fica, filtrando
            /// apenas aqueles que o usu√°rio ainda n√£o visualizou.
            /// 
            /// Caracter√≠sticas:
            /// - Acesso p√∫blico (n√£o requer autentica√ß√£o)
            /// - Filtra alertas por cidade
            /// - Mostra apenas alertas n√£o visualizados pelo usu√°rio
            /// - Requer ID do usu√°rio v√°lido
            /// </remarks>
            /// <param name="nomeCidade">Nome da cidade para filtrar os alertas</param>
            /// <param name="idUsuario">ID do usu√°rio para filtrar alertas n√£o visualizados</param>
            /// <response code="200">Retorna lista de alertas ativos n√£o visualizados</response>
            /// <response code="400">Retornado quando o ID do usu√°rio √© inv√°lido</response>
            /// <response code="404">Retornado quando o usu√°rio n√£o √© encontrado</response>
        [HttpGet("cidade")]
        [AllowAnonymous]
        [ProducesResponseType(typeof(IEnumerable<AlertaDto>), 200)]
        [ProducesResponseType(typeof(ProblemDetails), 400)]
        [ProducesResponseType(typeof(ProblemDetails), 404)]
        public async Task<ActionResult<IEnumerable<AlertaDto>>> GetByCity([FromQuery] string nomeCidade, [FromQuery] int idUsuario)
        {
            if (idUsuario <= 0)
            {
                return BadRequest(new ProblemDetails { Title = "ID de Usu√°rio inv√°lido", Detail = "O par√¢metro idUsuario √© obrigat√≥rio e deve ser um n√∫mero positivo." });
            }
            try
            {
                var list = await _service.GetByCityAsync(nomeCidade, idUsuario);
                foreach (var alerta in list)
                {
                    AddLinksToAlertaDto(alerta, idUsuario);
                }
                return Ok(list);
            }
            catch (KeyNotFoundException ex) 
            {
                return NotFound(new ProblemDetails { Title = "Usu√°rio n√£o encontrado", Detail = ex.Message });
            }
        }

        /// <summary>
        /// Lista todos os alertas de um determinado tipo. 
        /// </summary>
        /// <remarks>
        /// Este endpoint permite visualizar todos os alertas de um tipo espec√≠fico no sistema.
        /// 
        /// Caracter√≠sticas:
        /// - Requer autentica√ß√£o via token JWT
        /// - Retorna todos os alertas do tipo solicitado
        /// - N√£o considera hist√≥rico de visualiza√ß√µes dos usu√°rios
        /// 
        /// Diferen√ßas em rela√ß√£o ao endpoint /alertas/cidade:
        /// - N√£o filtra por cidade
        /// - N√£o considera alertas j√° visualizados
        /// - Retorna todos os alertas do tipo, independente do status
        /// 
        /// Exemplo de uso:
        /// GET /api/alertas/tipo/emergencia
        /// 
        /// Observa√ß√µes:
        /// - Token JWT deve ser enviado no header da requisi√ß√£o
        /// - Retorna todos os alertas do tipo, mesmo que j√° visualizados
        /// </remarks>
        /// <param name="tipo">Tipo de alerta a ser consultado (ex: emergencia, informativo, etc)</param>
        [HttpGet("tipo/{tipo}")]
        [Authorize]
        [ProducesResponseType(typeof(IEnumerable<AlertaDto>), 200)]
        public async Task<ActionResult<IEnumerable<AlertaDto>>> GetByTipo(string tipo)
        {
            var list = await _service.GetByTipoAsync(tipo);
            foreach (var alerta in list)
            {
                AddLinksToAlertaDto(alerta);
            }
            return Ok(list);
        }

        /// <summary>
        /// Busca um alerta espec√≠fico pelo seu identificador √∫nico (ID).
        /// </summary>
        /// <remarks>
        /// Este endpoint permite consultar os detalhes completos de um alerta espec√≠fico.
        /// 
        /// Caracter√≠sticas:
        /// - Acesso p√∫blico (n√£o requer autentica√ß√£o)
        /// - Retorna todos os dados do alerta
        /// - N√£o registra visualiza√ß√£o do alerta
        /// - N√£o marca o alerta como descartado
        /// 
        /// Exemplo de uso:
        /// GET /api/alertas/123
        /// 
        /// Observa√ß√µes:
        /// - O ID do alerta deve ser um n√∫mero v√°lido
        /// - Este endpoint apenas consulta, n√£o modifica o estado do alerta
        /// - Para marcar um alerta como visualizado ou descartado, use os endpoints espec√≠ficos
        /// </remarks>
        /// <param name="id">Identificador √∫nico do alerta que deseja consultar</param>
        /// <response code="200">Retorna os dados completos do alerta encontrado</response>
        /// <response code="404">Retornado quando o ID informado n√£o corresponde a nenhum alerta cadastrado</response>
        [HttpGet("{id}")]
        [AllowAnonymous]
        [ProducesResponseType(typeof(AlertaDto), 200)]
        [ProducesResponseType(typeof(ProblemDetails), 404)]
        public async Task<ActionResult<AlertaDto>> GetAlertaPorId([FromRoute] int id)
        {
            try
            {
                var alerta = await _service.GetAlertaByIdAsync(id);
                if (alerta == null)
                {
                    return NotFound(new ProblemDetails { Title = "Alerta n√£o encontrado", Detail = $"Alerta com ID {id} n√£o encontrado." });
                }
                AddLinksToAlertaDto(alerta);
                return Ok(alerta);
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new ProblemDetails { Title = "Recurso n√£o encontrado", Detail = ex.Message });
            }
        }

        /// <summary>
        /// Descarta um alerta espec√≠fico para um usu√°rio.
        /// </summary>
        /// <remarks>
        /// Este endpoint permite que um usu√°rio descarte (ocultar) um alerta espec√≠fico.
        /// 
        /// Caracter√≠sticas:
        /// - Acesso p√∫blico (n√£o requer autentica√ß√£o)
        /// - Realiza uma exclus√£o l√≥gica (o alerta continua no sistema, mas fica oculto para o usu√°rio)
        /// - O alerta descartado n√£o aparecer√° mais nas listagens do usu√°rio
        /// 
        /// Exemplo de uso:
        /// DELETE /api/alertas/123?idUsuario=456
        /// 
        /// Observa√ß√µes:
        /// - O ID do alerta e do usu√°rio s√£o obrigat√≥rios
        /// - O ID do usu√°rio deve ser um n√∫mero positivo
        /// - Esta opera√ß√£o √© espec√≠fica para um usu√°rio (outros usu√°rios ainda ver√£o o alerta)
        /// </remarks>
        /// <param name="id">Identificador √∫nico do alerta que ser√° descartado</param>
        /// <param name="idUsuario">Identificador do usu√°rio que est√° descartando o alerta</param>
        /// <response code="204">Opera√ß√£o realizada com sucesso (alerta descartado ou j√° estava descartado)</response>
        /// <response code="400">ID do usu√°rio inv√°lido ou n√£o fornecido</response>
        /// <response code="404">Alerta ou usu√°rio n√£o encontrado no sistema</response>
        [HttpDelete("{id}")]
        [AllowAnonymous]
        [ProducesResponseType(204)]
        [ProducesResponseType(typeof(ProblemDetails), 400)]
        [ProducesResponseType(typeof(ProblemDetails), 404)]
        public async Task<IActionResult> DescartarAlertaPorUsuario([FromRoute] int id, [FromQuery] int idUsuario)
        {
            if (idUsuario <= 0)
            {
                return BadRequest(new ProblemDetails { Title = "ID de Usu√°rio inv√°lido", Detail = "O par√¢metro idUsuario √© obrigat√≥rio e deve ser um n√∫mero positivo." });
            }
            try
            {
                await _service.DescartarAlertaParaUsuarioAsync(id, idUsuario);
                return NoContent();
            }
            catch (KeyNotFoundException ex)
            {
                return NotFound(new ProblemDetails { Title = "Recurso n√£o encontrado", Detail = ex.Message });
            }
        }

        /// <summary>
        /// Remove permanentemente todos os alertas do sistema.
        /// </summary>
        /// <remarks>
        /// Este endpoint permite a exclus√£o completa de todos os alertas do sistema.
        /// 
        /// Caracter√≠sticas:
        /// - Requer autentica√ß√£o JWT
        /// - Acesso restrito apenas para usu√°rios com perfil de Administrador
        /// - Opera√ß√£o irrevers√≠vel (n√£o √© poss√≠vel recuperar os alertas ap√≥s a exclus√£o)
        /// 
        /// Exemplo de uso:
        /// DELETE /api/alertas/todos
        /// 
        /// Observa√ß√µes:
        /// - √â altamente recomend√°vel fazer backup dos dados antes de executar esta opera√ß√£o
        /// - A opera√ß√£o retorna o n√∫mero total de alertas que foram removidos
        /// - Esta a√ß√£o afeta todos os usu√°rios do sistema
        /// </remarks>
        /// <response code="200">Opera√ß√£o conclu√≠da com sucesso. Retorna o n√∫mero de alertas removidos.</response>
        /// <response code="401">Usu√°rio n√£o autenticado. √â necess√°rio fornecer um token JWT v√°lido.</response>
        /// <response code="403">Usu√°rio autenticado n√£o possui permiss√£o de Administrador.</response>
        [HttpDelete("todos")]
        [Authorize(Roles = "Admin")]
        [ProducesResponseType(typeof(object), 200)]
        [ProducesResponseType(401)]
        [ProducesResponseType(403)]
        public async Task<IActionResult> DeleteTodosAlertas()
        {
            var count = await _service.DeleteTodosAlertasAsync();
            return Ok(new { message = $"{count} alertas foram deletados com sucesso." });
        }

        private void AddLinksToAlertaDto(AlertaDto alerta, int? idUsuario = null)
        {
            alerta.Links.Add(new ResourceLink(Url.Link(nameof(GetAlertaPorId), new { id = alerta.Id })!, "self", "GET"));
            
            if (idUsuario.HasValue)
            {
                 alerta.Links.Add(new ResourceLink(Url.Link(nameof(DescartarAlertaPorUsuario), new { id = alerta.Id, idUsuario = idUsuario.Value })!, "descartar-alerta-usuario", "DELETE"));
            }
        }
    }
} 