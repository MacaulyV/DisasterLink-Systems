using DisasterLink_API.DTOs.Create;
using DisasterLink_API.DTOs.Response;
using DisasterLink_API.DTOs.Update;
using DisasterLink_API.Interfaces.Services;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.Filters;
using System.Collections.Generic;
using System.Threading.Tasks;
using DisasterLink_API.DTOs.Common;

namespace DisasterLink_API.Controllers
{
    [ApiController]
    [Route("api/[controller]")]
    [SwaggerTag("Endpoints para gerenciar Pontos de Coleta de Doa√ß√µes")]
    public class PontosColetaController : ControllerBase
    {
        private readonly IPontoDeColetaDeDoacoesService _pontoColetaService;

        public PontosColetaController(IPontoDeColetaDeDoacoesService pontoColetaService)
        {
            _pontoColetaService = pontoColetaService;
        }

        /// <summary>
        /// Lista todos os pontos de coleta ativos no sistema.
        /// </summary>
        /// <remarks>
        /// Este endpoint permite buscar pontos de coleta de doa√ß√µes com filtros opcionais:
        /// 
        /// 1. Filtro por Cidade:
        ///    - Voc√™ pode especificar uma cidade para ver apenas os pontos de coleta daquela regi√£o
        ///    - Exemplo: S√£o Paulo, Rio de Janeiro, etc.
        /// 
        /// 2. Filtro por Tipo:
        ///    - Voc√™ pode filtrar por tipo espec√≠fico de doa√ß√£o
        ///    - Exemplos: "Arrecada√ß√£o de alimentos", "Coleta de roupas", "Doa√ß√£o de medicamentos"
        /// 
        /// Observa√ß√µes:
        /// - Os filtros s√£o opcionais - se n√£o forem informados, retorna todos os pontos ativos
        /// - Apenas pontos de coleta ativos s√£o retornados
        /// - Os resultados s√£o ordenados por relev√¢ncia
        /// </remarks>
        /// <param name="cidade">Nome da cidade para filtrar os pontos de coleta (opcional)</param>
        /// <param name="tipo">Tipo espec√≠fico de doa√ß√£o para filtrar os pontos (opcional)</param>
        /// <response code="200">Retorna a lista de pontos de coleta encontrados com sucesso</response>
        [HttpGet(Name = "GetAllPontosColeta")]
        [SwaggerOperation(Summary = "Lista pontos de coleta ativos", Description = "Retorna uma lista de pontos de coleta de doa√ß√µes ativos, com filtros opcionais.")]
        [ProducesResponseType(typeof(IEnumerable<PontoDeColetaDeDoacoesDto>), 200)]
        public async Task<ActionResult<IEnumerable<PontoDeColetaDeDoacoesDto>>> GetAllPontosColeta([FromQuery] string? cidade, [FromQuery] string? tipo)
        {
            var pontosColeta = await _pontoColetaService.GetAllPontosDeColetaAsync(cidade, tipo);
            foreach (var ponto in pontosColeta)
            {
                AddLinksToPontoColetaDto(ponto);
            }
            return Ok(pontosColeta);
        }

        /// <summary>
        /// Lista todos os pontos de coleta ativos no sistema, sem aplicar nenhum filtro.
        /// </summary>
        /// <remarks>
        /// Este endpoint retorna uma lista completa de todos os pontos de coleta ativos, 
        /// independentemente de:
        /// - Localiza√ß√£o (cidade, estado, regi√£o)
        /// - Tipo de doa√ß√£o aceita
        /// - Outros crit√©rios de filtragem
        /// 
        /// √ötil para:
        /// - Visualiza√ß√£o geral de todos os pontos dispon√≠veis
        /// - An√°lise completa da rede de pontos de coleta
        /// - Situa√ß√µes onde n√£o se deseja aplicar filtros espec√≠ficos
        /// </remarks>
        /// <response code="200">Retorna a lista completa de todos os pontos de coleta ativos no sistema.</response>
        [HttpGet("todos", Name = "GetAllPontosColetaSemFiltro")]
        [SwaggerOperation(Summary = "Lista todos os pontos de coleta (sem filtro)", Description = "Retorna uma lista de todos os pontos de coleta de doa√ß√µes ativos.")]
        [ProducesResponseType(typeof(IEnumerable<PontoDeColetaDeDoacoesDto>), 200)]
        public async Task<ActionResult<IEnumerable<PontoDeColetaDeDoacoesDto>>> GetAllPontosColetaSemFiltro()
        {
            var pontosColeta = await _pontoColetaService.GetAllPontosDeColetaAsync(null, null);
            foreach (var ponto in pontosColeta)
            {
                AddLinksToPontoColetaDto(ponto);
            }
            return Ok(pontosColeta);
        }

        /// <summary>
        /// Busca um ponto de coleta espec√≠fico pelo ID.
        /// </summary>
        /// <remarks>
        /// Este endpoint permite localizar um ponto de coleta espec√≠fico atrav√©s do seu ID √∫nico.
        /// 
        /// Como funciona:
        /// 1. Forne√ßa o ID do ponto de coleta desejado
        /// 2. O sistema retorna todos os detalhes do ponto encontrado
        /// 
        /// O que voc√™ receber√°:
        /// - Informa√ß√µes completas do ponto de coleta
        /// - Endere√ßo e localiza√ß√£o
        /// - Tipos de doa√ß√µes aceitas
        /// - Hor√°rio de funcionamento
        /// - Contatos e outras informa√ß√µes relevantes
        /// 
        /// Observa√ß√µes:
        /// - Se o ID n√£o existir, receber√° um erro 404
        /// - Este endpoint √© p√∫blico e n√£o requer autentica√ß√£o
        /// </remarks>
        [HttpGet("{id}", Name = "GetPontoColetaById")]
        [SwaggerOperation(Summary = "Busca ponto de coleta por ID", Description = "Retorna um ponto de coleta de doa√ß√µes espec√≠fico.")]
        [ProducesResponseType(typeof(PontoDeColetaDeDoacoesDto), 200)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<PontoDeColetaDeDoacoesDto>> GetPontoColetaById(int id)
        {
            var ponto = await _pontoColetaService.GetPontoDeColetaByIdAsync(id); 
            if (ponto == null)
            {
                return NotFound(new { message = $"Ponto de coleta com ID {id} n√£o encontrado." });
            }
            AddLinksToPontoColetaDto(ponto);
            return Ok(ponto);
        }

        /// <summary>
        /// Cria um novo ponto de coleta destinado ao usuario. 
        /// </summary>
        /// <remarks>
        /// Instru√ß√µes para criar um novo ponto de coleta:
        /// 
        /// 1. Campos Obrigat√≥rios:
        ///    - Nome do ponto de coleta
        ///    - Endere√ßo completo
        ///    - Tipo de doa√ß√£o aceita
        ///    - Data de in√≠cio (formato: yyyy-MM-dd)
        ///    - Hor√°rio de funcionamento
        /// 
        /// 2. Campos Opcionais:
        ///    - imagemUrl: URL da imagem do ponto de coleta
        ///    - Descri√ß√£o adicional
        ///    - Contatos para mais informa√ß√µes
        /// 
        /// 3. Comportamento do Sistema:
        ///    - Ao criar um ponto de coleta, um alerta p√∫blico √© gerado automaticamente
        ///    - O alerta permanecer√° ativo at√© ser manualmente removido
        ///    - Cada usu√°rio ter√° sua pr√≥pria visualiza√ß√£o do alerta
        /// 
        /// 4. Observa√ß√µes:
        ///    - Apenas administradores podem criar pontos de coleta
        ///    - √â necess√°rio estar autenticado com token JWT v√°lido
        ///    - Todos os campos s√£o validados antes da cria√ß√£o
        /// </remarks>
        /// <param name="pontoColetaDto">Dados para cria√ß√£o do ponto de coleta. 
        /// </param>
        /// <response code="201">Ponto de coleta criado com sucesso.</response>
        /// <response code="400">Dados inv√°lidos.</response>
        /// <response code="401">N√£o autorizado.</response>
        /// <response code="403">Acesso negado (n√£o √© Admin).</response>
        [HttpPost("criar", Name = "CreatePontoColeta")]
        [Authorize(Roles = "Admin")] // üîê JWT Admin
        [SwaggerOperation(Summary = "Cria um novo ponto de coleta üîê", Description = "Cria um novo ponto de coleta de doa√ß√µes. Requer autentica√ß√£o JWT e perfil de Admin.")]
        [ProducesResponseType(typeof(PontoDeColetaDeDoacoesDto), 201)]
        [ProducesResponseType(typeof(ValidationProblemDetails), 400)]
        [ProducesResponseType(401)]
        [ProducesResponseType(403)]
        public async Task<ActionResult<PontoDeColetaDeDoacoesDto>> CreatePontoColeta([FromBody] PontoDeColetaDeDoacoesCreateDto pontoColetaDto)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }
            try
            {
                var novoPontoColeta = await _pontoColetaService.CreatePontoDeColetaAsync(pontoColetaDto);
                AddLinksToPontoColetaDto(novoPontoColeta);
                return CreatedAtAction(nameof(GetPontoColetaById), new { id = novoPontoColeta.Id }, novoPontoColeta);
            }
            catch (ArgumentException ex)
            {
                ModelState.AddModelError(string.Empty, ex.Message);
                return BadRequest(new ValidationProblemDetails(ModelState));
            }
        }

        /// <summary>
        /// Atualiza parcialmente um ponto de coleta existente. 
        /// </summary>
        /// <remarks>
        /// Este endpoint permite atualizar informa√ß√µes espec√≠ficas de um ponto de coleta.
        /// 
        /// Como funciona:
        /// 1. Voc√™ s√≥ precisa enviar os campos que deseja atualizar
        /// 2. Os campos n√£o enviados permanecer√£o com seus valores atuais
        /// 3. Para remover uma imagem, envie "imagemUrl": null
        /// 4. Campos opcionais podem ser omitidos
        /// 
        /// Exemplo de uso:
        /// Para atualizar apenas a descri√ß√£o e o estoque, envie:
        /// {
        ///   "descricao": "Nova descri√ß√£o da coleta de cestas b√°sicas para fam√≠lias afetadas e desabrigadas.",
        ///   "estoque": "500 unidades"
        /// }
        /// 
        /// Observa√ß√µes importantes:
        /// - Apenas administradores podem fazer atualiza√ß√µes
        /// - √â necess√°rio estar autenticado com token JWT v√°lido
        /// - A data de in√≠cio n√£o pode ser alterada ap√≥s a cria√ß√£o
        /// </remarks>
        /// <param name="id">ID do ponto de coleta que ser√° atualizado</param>
        /// <param name="pontoDeColetaUpdateDto">Dados que ser√£o atualizados</param>
        /// <response code="200">Atualiza√ß√£o realizada com sucesso</response>
        /// <response code="400">Dados inv√°lidos ou tentativa de alterar dataInicio</response>
        /// <response code="401">Usu√°rio n√£o autenticado</response>
        /// <response code="403">Usu√°rio n√£o tem permiss√£o de administrador</response>
        /// <response code="404">Ponto de coleta n√£o encontrado</response>
        [HttpPatch("{id}", Name = "UpdatePontoColeta")]
        [Authorize(Roles = "Admin")] // üîê JWT Admin
        [SwaggerOperation(Summary = "Atualiza um ponto de coleta (PATCH) üîê", Description = "Atualiza parcialmente um ponto de coleta existente. Requer autentica√ß√£o JWT e perfil de Admin.")]
        [ProducesResponseType(typeof(PontoDeColetaDeDoacoesDto), 200)]
        [ProducesResponseType(typeof(ValidationProblemDetails), 400)]
        [ProducesResponseType(401)]
        [ProducesResponseType(403)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<PontoDeColetaDeDoacoesDto>> UpdatePontoColeta(int id, [FromBody] PontoDeColetaDeDoacoesUpdateDto pontoDeColetaUpdateDto)
        {
            if (!ModelState.IsValid) 
            {
                return BadRequest(ModelState);
            }

            try
            {
                var pontoAtualizado = await _pontoColetaService.UpdatePontoDeColetaAsync(id, pontoDeColetaUpdateDto);
                if (pontoAtualizado == null)
                {
                    return NotFound(new { message = $"Ponto de coleta com ID {id} n√£o encontrado." });
                }
                AddLinksToPontoColetaDto(pontoAtualizado);
                return Ok(pontoAtualizado);
            }
            catch (ArgumentException ex) 
            {
                ModelState.AddModelError(string.Empty, ex.Message);
                return BadRequest(new ValidationProblemDetails(ModelState));
            }
        }

        /// <summary>
        /// Registra a participa√ß√£o de um usu√°rio em um ponto de coleta de doa√ß√µes.
        /// </summary>
        /// <remarks>
        /// Este endpoint permite que um usu√°rio se registre para participar de um ponto de coleta de doa√ß√µes.
        /// 
        /// Informa√ß√µes Geradas Automaticamente:
        /// - ID da participa√ß√£o: n√∫mero de 4 d√≠gitos
        /// - Data e hora: registrada no hor√°rio de Bras√≠lia
        /// 
        /// Par√¢metros da URL:
        /// - pontoColetaId: ID do ponto de coleta onde deseja participar
        /// - idUsuario: ID do usu√°rio que est√° se registrando
        /// 
        /// Dados Obrigat√≥rios (no corpo da requisi√ß√£o):
        /// - formaDeAjuda: como pretende ajudar
        /// - telefone: n√∫mero para contato
        /// 
        /// Dados Opcionais (no corpo da requisi√ß√£o):
        /// - mensagem: observa√ß√µes adicionais
        /// - contato: nome de contato alternativo
        /// </remarks>
        /// <param name="pontoColetaId">ID do ponto de coleta (4 d√≠gitos) onde registrar a participa√ß√£o (da URL).</param>
        /// <param name="idUsuario">ID do usu√°rio participante (4 d√≠gitos) (da query string).</param>
        /// <param name="dto">Dados da participa√ß√£o: forma de ajuda, mensagem (opcional), contato (opcional) e telefone.</param>
        /// <response code="201">Participa√ß√£o registrada com sucesso. Retorna os dados da participa√ß√£o, incluindo ID e data/hora gerados.</response>
        /// <response code="400">Erro de valida√ß√£o nos dados enviados (ex: campos obrigat√≥rios ausentes no corpo, IDs inv√°lidos).</response>
        /// <response code="404">Ponto de coleta ou usu√°rio n√£o encontrados.</response>
        [HttpPost("{pontoColetaId}/participar")] // Rota atualizada
        [SwaggerOperation(Summary = "Registra participa√ß√£o de usu√°rio em ponto de coleta", Description = "Permite que um usu√°rio registre sua inten√ß√£o de participar em um ponto de coleta. O ID da participa√ß√£o e a data/hora s√£o gerados automaticamente.")]
        [ProducesResponseType(typeof(ParticipacaoPontoColetaDto), 201)]
        [ProducesResponseType(typeof(ValidationProblemDetails), 400)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<ParticipacaoPontoColetaDto>> AddParticipacao(
            [FromRoute] int pontoColetaId, 
            [FromQuery] int idUsuario, 
            [FromBody] ParticipacaoPontoColetaCreateDto dto)
        {
            if (!ModelState.IsValid) // Valida√ß√£o do DTO (corpo da requisi√ß√£o)
            {
                return BadRequest(ModelState);
            }

            // Valida√ß√µes adicionais para IDs podem ser feitas aqui se necess√°rio, 
            // embora o servi√ßo j√° v√° verificar a exist√™ncia.
            if (pontoColetaId <= 0)
            {
                ModelState.AddModelError(nameof(pontoColetaId), "O ID do ponto de coleta deve ser um n√∫mero positivo.");
                return BadRequest(new ValidationProblemDetails(ModelState));
            }
            if (idUsuario <= 0)
            {
                ModelState.AddModelError(nameof(idUsuario), "O ID do usu√°rio deve ser um n√∫mero positivo.");
                return BadRequest(new ValidationProblemDetails(ModelState));
            }

            try
            {
                var novaParticipacao = await _pontoColetaService.AddParticipacaoAsync(pontoColetaId, idUsuario, dto);
                
                if (novaParticipacao == null)
                {
                    // O servi√ßo retorna null se o Ponto de Coleta ou Usu√°rio n√£o forem encontrados.
                    // Ou se alguma outra l√≥gica de neg√≥cio impedir a cria√ß√£o (embora aqui seja mais para NotFound).
                    return NotFound(new { message = $"Ponto de coleta com ID {pontoColetaId} ou Usu√°rio com ID {idUsuario} n√£o encontrado, ou falha ao processar participa√ß√£o." });
                }
                
                // Retorna 201 Created com a localiza√ß√£o do novo recurso (opcional, mas boa pr√°tica)
                // Para isso, precisar√≠amos de um endpoint GetParticipacaoById, que n√£o temos atualmente.
                // Por simplicidade, retornaremos 201 com o objeto criado.
                return StatusCode(201, novaParticipacao);
            }
            catch (KeyNotFoundException ex) // Captura exce√ß√µes espec√≠ficas se o servi√ßo as lan√ßar
            {
                return NotFound(new { message = ex.Message });
            }
            catch (ArgumentException ex) // Para outros erros de valida√ß√£o que o servi√ßo possa lan√ßar
            {
                ModelState.AddModelError(string.Empty, ex.Message);
                return BadRequest(new ValidationProblemDetails(ModelState));
            }
        }

        /// <summary>
        /// Lista os participantes de um ponto de coleta.
        /// </summary>
        /// <remarks>
        /// Este endpoint retorna uma lista completa de todos os usu√°rios que est√£o participando
        /// de um determinado ponto de coleta. Para cada participante, s√£o retornadas informa√ß√µes
        /// como:
        /// - ID da participa√ß√£o
        /// - ID do usu√°rio participante
        /// - Nome do usu√°rio
        /// - Data de in√≠cio da participa√ß√£o
        /// - Status da participa√ß√£o
        /// - Outros detalhes relevantes
        /// 
        /// A lista pode estar vazia se n√£o houver participantes registrados.
        /// </remarks>
        /// <param name="id">ID do ponto de coleta.</param>
        /// <response code="200">Retorna a lista de participantes.</response>
        /// <response code="404">Ponto de coleta n√£o encontrado.</response>
        [HttpGet("{id}/participantes")]
        [SwaggerOperation(Summary = "Lista os participantes de um ponto de coleta", Description = "Retorna a lista de todas as participa√ß√µes registradas para um ponto de coleta espec√≠fico.")]
        [ProducesResponseType(typeof(IEnumerable<ParticipacaoPontoColetaDto>), 200)]
        [ProducesResponseType(404)]
        public async Task<ActionResult<IEnumerable<ParticipacaoPontoColetaDto>>> GetParticipantes(int id)
        {
            var participantes = await _pontoColetaService.GetParticipantesAsync(id);
            // Se o servi√ßo retornar uma lista vazia, isso pode significar que o ponto de coleta n√£o foi encontrado
            // OU que n√£o h√° participantes. Por simplicidade, retornamos a lista vazia em ambos os casos.
            // Alternativamente, o servi√ßo poderia lan√ßar uma exce√ß√£o ou retornar null se o ponto n√£o existir.
            return Ok(participantes);
        }

        /// <summary>
        /// Remove permanentemente um ponto de coleta do sistema.
        /// </summary>
        /// <remarks>
        /// Este endpoint permite a exclus√£o completa de um ponto de coleta. 
        /// 
        /// Importante:
        /// - Apenas administradores podem executar esta opera√ß√£o
        /// - A exclus√£o √© permanente e n√£o pode ser desfeita
        /// - Todos os dados relacionados ao ponto de coleta ser√£o removidos
        /// 
        /// Requisitos:
        /// - Autentica√ß√£o JWT v√°lida
        /// - Perfil de administrador
        /// </remarks>
        /// <param name="id">Identificador √∫nico do ponto de coleta que ser√° removido</param>
        /// <response code="204">Opera√ß√£o conclu√≠da com sucesso. O ponto de coleta foi removido.</response>
        /// <response code="401">Falha na autentica√ß√£o. Token JWT inv√°lido ou ausente.</response>
        /// <response code="403">Acesso negado. Usu√°rio n√£o possui permiss√£o de administrador.</response>
        /// <response code="404">Ponto de coleta n√£o encontrado no sistema.</response>
        [HttpDelete("{id}", Name = "DeletePontoColeta")]
        [Authorize(Roles = "Admin")] // üîê JWT Admin
        [SwaggerOperation(Summary = "Exclui um ponto de coleta üîê", Description = "Exclui um ponto de coleta existente. Requer autentica√ß√£o JWT e perfil de Admin.")]
        [ProducesResponseType(204)]
        [ProducesResponseType(401)]
        [ProducesResponseType(403)]
        [ProducesResponseType(404)]
        public async Task<IActionResult> DeletePontoColeta(int id)
        {
            try
            {
                var success = await _pontoColetaService.DeletePontoDeColetaAsync(id);
                if (!success)
                {
                    return NotFound(new { message = $"Ponto de coleta com ID {id} n√£o encontrado." });
                }
                return NoContent();
            }
            catch (Exception ex) // Tratamento gen√©rico para outras poss√≠veis exce√ß√µes
            {
                // Logar a exce√ß√£o (n√£o inclu√≠do aqui para brevidade)
                return StatusCode(500, new { message = "Ocorreu um erro interno ao tentar excluir o ponto de coleta.", details = ex.Message });
            }
        }

        private void AddLinksToPontoColetaDto(PontoDeColetaDeDoacoesDto ponto)
        {
            if (ponto == null) return;

            ponto.Links.Clear();

            var selfLink = Url.Link("GetPontoColetaById", new { id = ponto.Id });
            if (selfLink != null) ponto.Links.Add(new ResourceLink(selfLink, "self", "GET"));

            var updateLink = Url.Link("UpdatePontoColeta", new { id = ponto.Id });
            if (updateLink != null) ponto.Links.Add(new ResourceLink(updateLink, "update", "PATCH"));

            var deleteLink = Url.Link("DeletePontoColeta", new { id = ponto.Id });
            if (deleteLink != null) ponto.Links.Add(new ResourceLink(deleteLink, "delete", "DELETE"));
            
            // Link para registrar participa√ß√£o
            var participarLink = Url.Action(nameof(AddParticipacao), new { pontoColetaId = ponto.Id });
            if (participarLink != null) ponto.Links.Add(new ResourceLink(participarLink + "?idUsuario={idUsuario}", "participar", "POST"));

            // Link para listar participantes
            var participantesLink = Url.Action(nameof(GetParticipantes), new { id = ponto.Id });
            if (participantesLink != null) ponto.Links.Add(new ResourceLink(participantesLink, "participantes", "GET"));
        }
    }
} 